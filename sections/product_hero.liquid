<div class="padding-global z-index-1">
    <div class="container-large">
    <div class="product-header_component">
    <script>
    document.addEventListener('alpine:init', () => {

    const product = {{ product | json }}
    const options = product?.options;
    const options_by_name = {{ product.options_by_name |  json }}
    const variants = product?.variants;
    const selected_or_first_available_variant = {{ product.selected_or_first_available_variant | json }}
    const selectedProductId = selected_or_first_available_variant?.id;

    Alpine.data('handleVariant', () => ({
        bundle: {},
        product: product,
        options_by_name: options_by_name,
        options: options,
        variants: variants,
        selected_or_first_available_variant: selected_or_first_available_variant,
        variantImage: selected_or_first_available_variant?.featured_image?.src,
        selectedProductId: selectedProductId,
        quantity: 1,
        _price: selected_or_first_available_variant?.price ?? 0,
        addToCartButton: true,
        firstOptionHasAvailableChildren : {},
        selectorType : 'radio',

        qs(selector) {
            return document.querySelector(selector)
        },
        set price(value) {
            if (isNaN(value)) {
                throw new Error('price have to be a number');
            }
            this._price = value;
        },
        get price() {
            const price = new Intl.NumberFormat('{{ localization.language.iso_code }}-{{ localization.country.iso_code }}', {
                style: 'currency',
                currency: '{{ shop.currency }}',
            });
            return price.format(this._price/100 ?? 0);
        },
        updateVariantStatuses() {
            const selectedOptionOneVariants = variants.filter((variant) => {
                    let querySelector = '[data-productVariantsLoop] input[type="radio"]:checked'
                    if(this.selectorType === 'select') {
                        querySelector = '[data-productVariantsLoop] select'
                    }
                    return document.querySelector(querySelector)?.value === variant.option1
                }
            );

            const inputWrappers = [...document.querySelectorAll('[data-ProductVariantsLoop]')];

            inputWrappers.forEach((option, index) => {
                if (index === 0) return;
                let optionInputs = [...option.querySelectorAll('input[type="radio"]')];
                if(this.selectorType === 'select') {
                    optionInputs = [...option.querySelectorAll('option')];
                }
                const previousOptionSelected = inputWrappers[index - 1].querySelector(':checked').value;
                const availableOptionInputsValue = selectedOptionOneVariants
                    .filter((variant) => variant.available && variant[`option${index}`] === previousOptionSelected)
                    .map((variantOption) => variantOption[`option${index + 1}`]);
                this.setInputAvailability(optionInputs, availableOptionInputsValue);

            });

        },
        setInputAvailability(listOfOptions, listOfAvailableOptions) {
            listOfOptions.forEach((input) => {
                if (listOfAvailableOptions.includes(input.getAttribute('value'))) {
                    input.classList.remove('disabled');
                    input.removeAttribute('disabled');

                } else {
                    input.classList.add('disabled');
                    input.setAttribute('disabled', '');
                }
            });

        },
        activateVariants() {
            this.selectorType = document.querySelector('[data-selectorType]')?.dataset?.selectortype ?? this.selectorType
            variants.map((variant) => {
                if(this.firstOptionHasAvailableChildren[variant?.option1] === undefined) {
                    this.firstOptionHasAvailableChildren[variant?.option1] = 0;
                }
                this.firstOptionHasAvailableChildren[variant?.option1] += variant?.available;
            });

            const option1 = this.getVariantElement(options?.[0]);
            const option2 = this.getVariantElement(options?.[1]);
            const option3 = this.getVariantElement(options?.[2]);
            if (option1) {
                this.activateVariant(option1)
            }
            if (option2) {
                this.activateVariant(option2)
            }
            if (option3) {
                this.activateVariant(option3)
            }
            this.updateVariantStatuses()
            // todo: durch richtiges CSS ersetzen oder CSS muss durch halbstark kommen
            const css = ' [data-ProductVariantsLoop] input[type=radio]:disabled+span, ' +
                ' [data-ProductVariantsLoop] input[type=radio].disabled+span{ ' +
                ' text-decoration: line-through; ' +
                ' opacity: .5; ' +
                ' } ' +
                ' .button.max-width-full.w-button:disabled, ' +
                ' .button.max-width-full.w-button[disabled] { ' +
                '  cursor: not-allowed; ' +
                ' }';
            const style = document.createElement("style")
            const head = document.getElementsByTagName('head')[0]
            head.appendChild(style)
            style.appendChild(document.createTextNode(css));
        },
        activateVariant(element) {
            element.previousElementSibling.classList.add('w--redirected-checked')
        },
        // Holt aus der übergebenen Optionsgruppe den Wert des selektierten Redio-Buttons
        checkedVariantValue(optionName) {
            return this.getVariantElement(optionName)?.value;
        },
        // Holt aus der übergebenen Optionsgruppe das selektierte Element
        getVariantElement(optionName) {
            let selector = "[data-productVariantsLoop] input[name='" + optionName + "']:checked"
            if(this.selectorType === 'select') {
                selector ="[data-productVariantsLoop] select[name='" + optionName + "'] option:checked"
                if(this.qs(selector)?.disabled) {
                    selector ="[data-productVariantsLoop] select[name='" + optionName + "'] option:not([disabled])"
                }
            }

            return this.qs(selector) ? this.qs(selector) : '';
        },
        filterVariants() {
            const option1 = this.checkedVariantValue(options?.[0]);
            const option2 = this.checkedVariantValue(options?.[1]);
            const option3 = this.checkedVariantValue(options?.[2]);

            let selectedOptions = [
                option1,
                option2,
                option3,
            ];
            selectedOptions = (selectedOptions.filter(i => i)).join('-')

            let possibleProducts = []
            for (const variant of variants) {
                let variantString = [
                    option1 ? variant?.option1 : undefined,
                    option2 ? variant?.option2 : undefined,
                    option3 ? variant?.option3 : undefined,
                ];
                variantString = (variantString.filter(i => i)).join('-')

                if (selectedOptions === variantString) {
                    possibleProducts.push(variant)
                }
            }

            return possibleProducts;
        },

        setVariant() {
            this.updateVariantStatuses()
            const matchedProducts = this.filterVariants()

            if (matchedProducts.length !== 1) {
                console.log('Keine eindeutige Variante', matchedProducts)
                //this.updateVariantStatuses()
                this.addToCartButton = false
                return
            }

            this.addToCartButton = true

            const matchedProduct = matchedProducts[0];
            console.log('matchedProducts', matchedProduct)
            this.selectedProductId = matchedProduct.id
            this.variantImage = matchedProduct?.featured_image?.src
            this.price = matchedProduct?.price;
            this.selected_or_first_available_variant = matchedProduct;
            //this.updateVariantStatuses()
        },

        getAddToCartBody(products) {
            return JSON.stringify({
                'items': products.map(product => ({
                    id: product.id,
                    quantity: product.quantity ?? 1,
                }))
            });
        },

        callAddToCartApi(body) {
            return fetch(window.Shopify.routes.root + 'cart/add.js', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: body
            })
        },

        /**
         * Add all products to cart.
         */
        async addToCartWithBundle() {
            console.log('addToCartWithBundle() called!');

            // Map all bundle products
            const products = Object.entries(this.bundle).map(([key, value]) => ({
                id: value,
                quantity: 1
            }))

            // Add selected product
            products.push({
                id: this.selectedProductId ?? this.selected_or_first_available_variant?.id,
                quantity: this.quantity ?? 1,
            })

            // Create body with all products
            let body = this.getAddToCartBody(products);

            // Single API call for all products
            try {
                let response = await this.callAddToCartApi(body);
                let data = await response.json();
                console.log('Items added (addToCartWithBundle()):', data.items);
                this.products = data.items;

                console.log('All items added!');
                this.$dispatch('cartupdated');
                this.$dispatch('toggleminicart');
                this.$dispatch('showcartmessage', { status: data.status, message: data.message, description: data.description });
            } catch (error) {
                console.error('Error in add to cart with bundle:', error);
                this.$dispatch('showcartmessage', { status: error.status, message: error.message, description: error.description });
            }
        },

        /**
         * Add a single product to cart.
         */
        addToCart(productId = undefined, quantity = undefined) {
            console.log('add to cart called, available:', this.selected_or_first_available_variant.available);

            if(!this.selected_or_first_available_variant.available) {
                return
            }

            let body = JSON.stringify({
                'items': [
                    {
                        id: productId ?? this.selectedProductId ?? this.selected_or_first_available_variant?.id,
                        quantity: quantity ?? this.quantity ?? 1,
                    }
                ]
            });

            fetch(window.Shopify.routes.root + 'cart/add.js', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: body
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Item (addToCart()): ', data, data.items);
                    this.products = data.items;

                    console.log('product added');
                    console.log('Dispatch cart events');
                    this.$dispatch('cartupdated');
                    this.$dispatch('toggleminicart');
                    this.$dispatch('showcartmessage', { status: data.status, message: data.message, description: data.description });
                })
                .catch((error) => {
                    console.error('addToCart error:', error);
                    this.$dispatch('showcartmessage', { status: error.status, message: error.message, description: error.description });
                });
        },

        /**
         * Format monetary values.
         * @fixme: This is duplicated in minicart.js
         */
        moneyFormat(value, locale = '{{ localization.language.iso_code }}-{{ localization.country.iso_code }}', minor = true) {
            const formatter = new Intl.NumberFormat(locale, {
                style: 'currency',
                currency: '{{ shop.currency }}',
            });

            // @todo: Enable to use more currencies.

            value = minor ? value / 100 : value;

            return formatter.format(value);
        },
    }))
});

</script>
<div li-element="product-variant-container" class="w-layout-grid product-header_layout" x-data="handleVariant()" x-init="$nextTick(() => { activateVariants() })">
    <div class="swiper-container is-product-gallery">
    <div class="swiper is-product-gallery">
    <div id="my-gallery" class="swiper-wrapper is-product-gallery">
    {% for image in product.images %}    <div li-for="image in product.images" class="swiper-slide is-product-gallery">
                                    
                            <div class="product_gallery-lightbox">
    <img loading="lazy" li-object:src="image.src | product_img_url: 'master'" li-object:alt="image.alt" src="{{ image.src | product_img_url: 'master' }}" alt="{{ image.alt }}" class="product_gallery-image">
    </div>

                            
                        </div>
{% endfor %}    </div>
    </div>
<div class="product-header_slider-wrapper">
    <div class="swiper_button-wrapper is-product-slider pointer-events-off z-index-1 hide-mobile-landscape">
    <a href="#" class="swiper_button swiper-prev pointer-events-on w-inline-block">
    <div class="swiper_button-icon is-reversed w-embed">
    <svg width="100%" height="100%" viewbox="0 0 29.541 22.323">
    <g id="Group_44" data-name="Group 44" transform="translate(0 1.014)">
    <path id="Path_1" data-name="Path 1" d="M115.445,20.633l9.311-10.148L115.445.338" transform="translate(-97.25 -0.338)" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="3">
        </path>
<line id="Line_1" data-name="Line 1" x1="27.506" transform="translate(0 10.148)" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="3">
        </line>
    </g>
    </svg>
    </div>
    </a>
<a href="#" class="swiper_button swiper-next pointer-events-on w-inline-block">
    <div class="swiper_button-icon w-embed">
    <svg width="100%" height="100%" viewbox="0 0 29.541 22.323">
    <g id="Group_44" data-name="Group 44" transform="translate(0 1.014)">
    <path id="Path_1" data-name="Path 1" d="M115.445,20.633l9.311-10.148L115.445.338" transform="translate(-97.25 -0.338)" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="3">
        </path>
<line id="Line_1" data-name="Line 1" x1="27.506" transform="translate(0 10.148)" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="3">
        </line>
    </g>
    </svg>
    </div>
    </a>
    </div>
<div class="swiper is-product-thumbnail">
    <div class="swiper-wrapper is-product-thumbnail">
    {% for image in product.images %}    <div li-for="image in product.images" class="swiper-slide is-product-thumbnail">
                                    <img loading="lazy" li-object:src="image.src | product_img_url: 'master'" li-object:alt="image.alt" src="{{ image.src | product_img_url: 'master' }}" alt="{{ image.alt }}" class="product_thumbnail-image">

                        </div>
{% endfor %}    </div>
    </div>
    </div>
<div class="swiper-slide is-product-thumbnail is-active hide">
        </div>
    </div>
<div id="w-node-_7048b639-be81-c25f-3e39-a62262971160-f1524a46" class="product-header_product-details">
    <div li-object="product.vendor" class="text-size-regular">
    {{ product.vendor }}    </div>
<h1 li-object:text="product.title" class="heading-style-h2">
{{ product.title }}

        </h1>
<div class="spacer-small">
        </div>
<div class="product-header_price-wrapper">
    <div li-object="product.price" li-js-price="price" class="text-size-large text-weight-bold">
    {{ product.price }}    </div>
<template x-if="selected_or_first_available_variant.compare_at_price > selected_or_first_available_variant.price">
            <div li-js-if="selected_or_first_available_variant.compare_at_price > selected_or_first_available_variant.price">
        <div li-object="product.compare_at_price | money" class="text-size-regular text-style-strikethrough text-align-right text-style-muted">
    {{ product.compare_at_price | money }}    </div>
        </div>
    </template>
<div class="product-header_tag-list">
    <template x-if="selected_or_first_available_variant.available != true">
            <div li-js-if="selected_or_first_available_variant.available != true" class="product-item_tag">
        Not in Stock        </div>
    </template>
<template x-if="selected_or_first_available_variant.compare_at_price > selected_or_first_available_variant.price">
            <div li-js-if="selected_or_first_available_variant.compare_at_price > selected_or_first_available_variant.price" class="product-item_tag is-red">
        Sale        </div>
    </template>
    </div>
    </div>
<div class="text-size-small">
    inkl. MwSt.    </div>
<div class="spacer-small">
        </div>
<div class="product-header_lieferzeit-wrapper">
    <div class="spacer-small">
        </div>
<template x-if="selected_or_first_available_variant.available == true">
            <div li-js-if="selected_or_first_available_variant.available == true" class="product-header_lieferzeit">
        <div class="product-header_lieferzeit-icon w-embed">
    <svg width="100%" height="100%" viewbox="0 0 23 22" fill="none" preserveaspectratio="xMidYMid meet" aria-hidden="true" role="img">
    <mask id="mask0_1611_6356" style="mask-type:alpha" maskunits="userSpaceOnUse" x="0" y="0" width="23" height="22">
    <rect x="0.223633" width="22" height="22" fill="#D9D9D9">
        </rect>
    </mask>
<g mask="url(#mask0_1611_6356)">
    <path d="M13.9736 18.3334C11.9264 18.3334 10.1923 17.623 8.77151 16.2022C7.35068 14.7813 6.64026 13.0473 6.64026 11.0001C6.64026 8.96814 7.35068 7.23793 8.77151 5.80946C10.1923 4.38098 11.9264 3.66675 13.9736 3.66675C16.0055 3.66675 17.7357 4.38098 19.1642 5.80946C20.5927 7.23793 21.3069 8.96814 21.3069 11.0001C21.3069 13.0473 20.5927 14.7813 19.1642 16.2022C17.7357 17.623 16.0055 18.3334 13.9736 18.3334ZM13.9736 16.5001C15.5014 16.5001 16.8 15.9654 17.8694 14.8959C18.9389 13.8265 19.4736 12.5279 19.4736 11.0001C19.4736 9.4723 18.9389 8.17369 17.8694 7.10425C16.8 6.0348 15.5014 5.50008 13.9736 5.50008C12.4458 5.50008 11.1472 6.0348 10.0778 7.10425C9.00831 8.17369 8.47359 9.4723 8.47359 11.0001C8.47359 12.5279 9.00831 13.8265 10.0778 14.8959C11.1472 15.9654 12.4458 16.5001 13.9736 16.5001ZM16.059 14.4147L17.3653 13.1084L14.8903 10.6334V7.33341H13.0569V11.3897L16.059 14.4147ZM2.05693 8.25008V6.41675H5.72359V8.25008H2.05693ZM1.14026 11.9167V10.0834H5.72359V11.9167H1.14026ZM2.05693 15.5834V13.7501H5.72359V15.5834H2.05693Z" fill="#323232">
        </path>
    </g>
    </svg>
    </div>
<div>
    Delivery: <span>
    1–3 Days    </span>
    </div>
        </div>
    </template>
<div class="spacer-xxsmall">
        </div>
<div class="product-header_lieferzeit">
    <div class="product-header_lieferzeit-icon w-embed">
    <svg width="100%" height="100%" viewbox="0 0 23 22" fill="none" preserveaspectratio="xMidYMid meet" aria-hidden="true" role="img">
    <mask id="mask0_1612_6254" style="mask-type:alpha" maskunits="userSpaceOnUse" x="0" y="0" width="23" height="22">
    <rect x="0.223633" width="22" height="22" fill="#D9D9D9">
        </rect>
    </mask>
<g mask="url(#mask0_1612_6254)">
    <path d="M11.223 10.9999C11.7271 10.9999 12.1587 10.8204 12.5178 10.4614C12.8768 10.1023 13.0563 9.67075 13.0563 9.16659C13.0563 8.66242 12.8768 8.23082 12.5178 7.87179C12.1587 7.51277 11.7271 7.33325 11.223 7.33325C10.7188 7.33325 10.2872 7.51277 9.92819 7.87179C9.56916 8.23082 9.38965 8.66242 9.38965 9.16659C9.38965 9.67075 9.56916 10.1023 9.92819 10.4614C10.2872 10.8204 10.7188 10.9999 11.223 10.9999ZM11.223 17.7374C13.0869 16.0263 14.4695 14.4718 15.3709 13.0739C16.2723 11.676 16.723 10.4346 16.723 9.34992C16.723 7.68464 16.1921 6.3211 15.1303 5.25929C14.0685 4.19749 12.766 3.66659 11.223 3.66659C9.67993 3.66659 8.3775 4.19749 7.31569 5.25929C6.25388 6.3211 5.72298 7.68464 5.72298 9.34992C5.72298 10.4346 6.17368 11.676 7.07507 13.0739C7.97645 14.4718 9.35909 16.0263 11.223 17.7374ZM11.223 20.1666C8.76326 18.0735 6.92611 16.1294 5.71152 14.3343C4.49694 12.5392 3.88965 10.8777 3.88965 9.34992C3.88965 7.05825 4.6268 5.23256 6.10111 3.87284C7.57541 2.51311 9.2827 1.83325 11.223 1.83325C13.1633 1.83325 14.8706 2.51311 16.3449 3.87284C17.8192 5.23256 18.5563 7.05825 18.5563 9.34992C18.5563 10.8777 17.949 12.5392 16.7344 14.3343C15.5199 16.1294 13.6827 18.0735 11.223 20.1666Z" fill="#323232">
        </path>
    </g>
    </svg>
    </div>
<div>
    Availability: <template x-if="selected_or_first_available_variant.available == true">
            <span li-js-if="selected_or_first_available_variant.available == true" class="text-color-green">
        available        </span>
    </template>
<template x-if="selected_or_first_available_variant.available == false">
            <span li-js-if="selected_or_first_available_variant.available == false" class="text-color-red">
        not available        </span>
    </template>
    </div>
    </div>
<div class="spacer-small">
        </div>
    </div>
<div class="spacer-small">
        </div>
<div class="product-header_add-to-cart w-form">
    {% form 'product' , product, class: 'product-header_default-state' %}
{% if product.has_only_default_variant != true %}    <div li-if="product.has_only_default_variant != true" class="product-header_option-list">
    <template x-for="(option, optionKey) in product.options" :key="optionKey">
    <div li-element="product-options-loop" class="product-header_option" data-ProductVariantsLoop="true">
    <div li-element="product-options-name" x-text="option">
    Variant    </div>
<div class="product-header_radio-list">
    <template x-for="(variantName, variantKey) in options_by_name[option].option.values" :key="variantName">
    <label li-element="product-option-loop" class="product-header_radio w-radio">
    <div class="w-form-formradioinput w-form-formradioinput--inputType-custom product-header_radio-button w-radio-input">
        </div>
<input type="radio" li-element="product-option-input" style="opacity:0;position:absolute;z-index:-1" x-on:click="setVariant" :name="option" :data-name="option" :value="variantName" :id="variantName" :checked="selected_or_first_available_variant?.options.includes(variantName)" data-selectorType="radio" :class="firstOptionHasAvailableChildren[variantName] ? '' : 'disabled'">
<span li-element="product-option-name" class="text-size-regular text-weight-semibold w-form-label" for="radio" x-text="variantName" :for="variantName">
    XS    </span>
    </label>
</template>
    </div>
    </div>
</template>
    </div>
{% endif %}<div class="spacer-small">
        </div>
<div class="product-header_ad-to-cart-wrapper">
    <template x-if="selected_or_first_available_variant.available == true">
            <div li-js-if="selected_or_first_available_variant.available == true" class="product-header_quantity">
        <input class="form-input is-quantity w-input" maxlength="256" name="quantity" li-element="add-to-cart-quantity" data-name="quantity" placeholder="1" type="number" id="quantity" required="" x-model="quantity">
<a li-element="add-to-cart" href="#" class="button max-width-full w-button" @click="addToCart()" :disabled="!addToCartButton">
    Add to cart    </a>
        </div>
    </template>
<template x-if="selected_or_first_available_variant.available != true">
            <div li-js-if="selected_or_first_available_variant.available != true">
        <a href="#" class="button is-secondary max-width-full pointer-events-off w-button">
    Not in Stock    </a>
        </div>
    </template>
    </div>
{% endform %}
<div class="out-of-stock-state w-form-done">
    <div>
    Thank you! Your submission has been received!    </div>
    </div>
<div class="error-state w-form-fail">
    <div>
    Oops! Something went wrong while submitting the form.    </div>
    </div>
    </div>
    </div>
    </div>
    </div>
    </div>
    </div>
<div class="product-header_bg">
    <div class="product-header_bg-grey">
        </div>
    </div>
    


{% schema %}
    {"tag":"div","name":"product_hero","class":"section_product-header","settings":[],"presets":[{"name":"product_hero","category":"Liquify"}]}
{% endschema %}
